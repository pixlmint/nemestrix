// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Pixlmint.Nemestrix.Data;

#nullable disable

namespace Pixlmint.Nemestrix.Migrations
{
    [DbContext(typeof(ApplicationDb))]
    [Migration("20250503191313_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "ltree");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Pixlmint.Nemestrix.Model.LeafNode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.HasKey("Id");

                    b.ToTable("Leafs", (string)null);

                    b.HasDiscriminator().HasValue("LeafNode");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Pixlmint.Nemestrix.Model.TreeNode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("LeafId")
                        .HasColumnType("integer");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("ltree");

                    b.HasKey("Id");

                    b.HasIndex("LeafId")
                        .IsUnique();

                    b.ToTable("Nodes");
                });

            modelBuilder.Entity("Pixlmint.Nemestrix.Model.BooleanLeafNode", b =>
                {
                    b.HasBaseType("Pixlmint.Nemestrix.Model.LeafNode");

                    b.Property<bool>("Value")
                        .HasColumnType("boolean")
                        .HasColumnName("BooleanValue");

                    b.HasDiscriminator().HasValue("BooleanLeafNode");
                });

            modelBuilder.Entity("Pixlmint.Nemestrix.Model.NumericLeafNode", b =>
                {
                    b.HasBaseType("Pixlmint.Nemestrix.Model.LeafNode");

                    b.Property<double>("Value")
                        .HasColumnType("double precision")
                        .HasColumnName("NumericValue");

                    b.HasDiscriminator().HasValue("NumericLeafNode");
                });

            modelBuilder.Entity("Pixlmint.Nemestrix.Model.StringLeafNode", b =>
                {
                    b.HasBaseType("Pixlmint.Nemestrix.Model.LeafNode");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("String");

                    b.HasDiscriminator().HasValue("StringLeafNode");
                });

            modelBuilder.Entity("Pixlmint.Nemestrix.Model.TreeNode", b =>
                {
                    b.HasOne("Pixlmint.Nemestrix.Model.LeafNode", "Leaf")
                        .WithOne("Node")
                        .HasForeignKey("Pixlmint.Nemestrix.Model.TreeNode", "LeafId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Leaf");
                });

            modelBuilder.Entity("Pixlmint.Nemestrix.Model.LeafNode", b =>
                {
                    b.Navigation("Node");
                });
#pragma warning restore 612, 618
        }
    }
}
